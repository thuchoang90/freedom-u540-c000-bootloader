#ifndef _USB11HS_PLUGIN_H
#define _USB11HS_PLUGIN_H

#include "sifive/platform.h"

// This plugin is made to match the calling convention of ARM libs

typedef union {
  uint32_t LONG;
  uint16_t SHORT[2];
  uint8_t BYTE[4];
} st_long;
typedef union {
  uint16_t LONG;
  uint16_t SHORT;
  uint8_t BYTE[2];
} st_short;
typedef union {
  uint8_t LONG;
  uint8_t SHORT;
  uint8_t BYTE;
} st_byte;


typedef union {
  uint8_t LONG;
  uint8_t SHORT;
  uint8_t BYTE;
  struct {
    unsigned char HOST_MODE : 1;
    unsigned char RESET_CORE : 1;
    unsigned char : 6;
  } BIT;
} st_HOST_SLAVE_CONTROL_REG;
st_HOST_SLAVE_CONTROL_REG* P_USB11HS_HOST_SLAVE_CONTROL_REG = (st_HOST_SLAVE_CONTROL_REG*)(USB11HS_CTRL_ADDR + USB11HS_HOST_SLAVE_CONTROL_REG);
#define USB_HOST_SLAVE_CONTROL_REG (*P_USB11HS_HOST_SLAVE_CONTROL_REG)
typedef union {
  uint8_t LONG;
  uint8_t SHORT;
  uint8_t BYTE;
  struct {
    unsigned char VERSION_NUM_MINOR : 4;
    unsigned char VERSION_NUM_MAJOR : 4;
  } BIT;
} st_HOST_SLAVE_VERSION_REG;
st_HOST_SLAVE_VERSION_REG* P_USB11HS_HOST_SLAVE_VERSION_REG = (st_HOST_SLAVE_VERSION_REG*)(USB11HS_CTRL_ADDR + USB11HS_HOST_SLAVE_VERSION_REG);

st_byte* P_USB11HS_HOST_TX_ADDR_REG = (st_byte*)(USB11HS_CTRL_ADDR + USB11HS_HOST_TX_ADDR_REG);
#define USB_TX_ADDR_REG (*P_USB11HS_HOST_TX_ADDR_REG)
st_byte* P_USB11HS_HOST_TX_ENDP_REG = (st_byte*)(USB11HS_CTRL_ADDR + USB11HS_HOST_TX_ENDP_REG);
#define USB_TX_ENDP_REG (*P_USB11HS_HOST_TX_ENDP_REG)
st_byte* P_USB11HS_HOST_TX_TRANS_TYPE_REG = (st_byte*)(USB11HS_CTRL_ADDR + USB11HS_HOST_TX_TRANS_TYPE_REG);
#define USB_TX_TRANS_TYPE_REG (*P_USB11HS_HOST_TX_TRANS_TYPE_REG)
st_byte* P_USB11HS_HOST_TX_CONTROL_REG = (st_byte*)(USB11HS_CTRL_ADDR + USB11HS_HOST_TX_CONTROL_REG);
#define USB_CONTROL_REG (*P_USB11HS_HOST_TX_CONTROL_REG)
st_byte* P_USB11HS_HOST_RX_STATUS_REG = (st_byte*)(USB11HS_CTRL_ADDR + USB11HS_HOST_RX_STATUS_REG);
#define USB_RX_STATUS_REG (*P_USB11HS_HOST_RX_STATUS_REG)
st_byte* P_USB11HS_HOST_RX_FIFO_DATA_COUNT_LSB = (st_byte*)(USB11HS_CTRL_ADDR + USB11HS_HOST_RX_FIFO_DATA_COUNT_LSB);
#define USB_RX_FIFO_DATA_COUNT_LSB (*P_USB11HS_HOST_RX_FIFO_DATA_COUNT_LSB)
st_byte* P_USB11HS_HOST_RX_FIFO_DATA = (st_byte*)(USB11HS_CTRL_ADDR + USB11HS_HOST_RX_FIFO_DATA);
#define USB_RX_FIFO_DATA (*P_USB11HS_HOST_RX_FIFO_DATA)
st_byte* P_USB11HS_HOST_INTERRUPT_STATUS_REG = (st_byte*)(USB11HS_CTRL_ADDR + USB11HS_HOST_INTERRUPT_STATUS_REG);
#define USB_INTERRUPT_STATUS_REG (*P_USB11HS_HOST_INTERRUPT_STATUS_REG)
st_byte* P_USB11HS_HOST_TX_SOF_ENABLE_REG = (st_byte*)(USB11HS_CTRL_ADDR + USB11HS_HOST_TX_SOF_ENABLE_REG);
#define USB_TX_SOF_ENABLE_REG (*P_USB11HS_HOST_TX_SOF_ENABLE_REG)
st_byte* P_USB11HS_HOST_TX_LINE_CONTROL_REG = (st_byte*)(USB11HS_CTRL_ADDR + USB11HS_HOST_TX_LINE_CONTROL_REG);
#define USB_TX_LINE_CONTROL_REG (*P_USB11HS_HOST_TX_LINE_CONTROL_REG)
st_byte* P_USB11HS_HOST_INTERRUPT_MASK_REG = (st_byte*)(USB11HS_CTRL_ADDR + USB11HS_HOST_INTERRUPT_MASK_REG);
#define USB_INTERRUPT_MASK_REG (*P_USB11HS_HOST_INTERRUPT_MASK_REG)


// Some useful masks from the usb11hs linux driver
#	define OHS900_HSCTLREG_HOST_EN_MASK	0x01 
#	define OHS900_HSCTLREG_RESET_CORE	0x02 
#define OHS900_HS_CTL_INIT OHS900_HSCTLREG_HOST_EN_MASK 

#	define OHS900_INTMASK_TRANS_DONE	0x01   
#	define OHS900_INTMASK_SOFINTR	0x08   
#	define OHS900_INTMASK_INSRMV	0x04   	
#	define OHS900_INTMASK_RESUME_DET	0x02 

#	define OHS900_TXLCTL_MASK_FORCE	0x4 
#	define OHS900_TXLCTL_MASK_LINE_CTRL_BITS 0x7
#		define OHS900_TXLCTL_MASK_NORMAL	0x00 
#		define OHS900_TXLCTL_MASK_SE0	0x04	
#		define OHS900_TXLCTL_MASK_FS_J	0x06    
#		define OHS900_TXLCTL_MASK_FS_K	0x05	
#	define OHS900_TXLCTL_MASK_LSPD	0x00 
#	define OHS900_TXLCTL_MASK_FSPD	0x18 
#	define OHS900_TXLCTL_MASK_FS_POL	0x08 
#	define OHS900_TXLCTL_MASK_FS_RATE 0x10

#endif /* _USB11HS_PLUGIN_H */
